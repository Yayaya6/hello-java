<!-- ### 配置数据源 begin ###-->
<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
  destroy-method="close" xmlns:p="http://www.springframework.org/schema/beans"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:tx="http://jboss.org/xml/ns/javax/validation/mapping"
  xmlns:tx="http://xmlns.jcp.org/xml/ns/validation/mapping"
  xmlns:aop="http://www.springframework.org/schema/aop">
  <!-- 基本属性 url、user、password -->
  <property name="url" value="${spring.datasource.url}" />
  <property name="username" value="${spring.datasource.username}" />
  <property name="password" value="${spring.datasource.password}" />
  <property name="driverClassName" value="${spring.datasource.driverClassName}" />


  <!-- 配置初始化大小、最小、最大 -->
  <property name="initialSize" value="${spring.datasource.initialSize:5}" />
  <property name="minIdle" value="${spring.datasource.minIdle:5}" />
  <property name="maxActive" value="${spring.datasource.maxActive:20}" />

  <!-- 配置获取连接等待超时的时间 -->
  <property name="maxWait" value="${spring.datasource.maxWait:30000}" />

  <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
  <property name="timeBetweenEvictionRunsMillis" value="${spring.datasource.timeBetweenEvictionRunsMillis}" />

  <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
  <property name="minEvictableIdleTimeMillis" value="${spring.datasource.minEvictableIdleTimeMillis}" />

  <property name="validationQuery" value="${spring.datasource.validationQuery}" />
  <property name="testWhileIdle" value="${spring.datasource.testWhileIdle}" />
  <property name="testOnBorrow" value="${spring.datasource.testOnBorrow}" />
  <property name="testOnReturn" value="${spring.datasource.testOnReturn}" />

  <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
  <property name="poolPreparedStatements" value="${spring.datasource.poolPreparedStatements}" />
  <property name="maxPoolPreparedStatementPerConnectionSize" value="${spring.datasource.maxPoolPreparedStatementPerConnectionSize}" />

  <!-- 配置监控统计拦截的filters -->
  <property name="filters" value="${spring.datasource.filters}" />

  <property name="connectionProperties" value="{spring.datasource.connectionProperties}" />
</bean>
  <!-- ### 配置数据源  end ###-->

  <!-- ### Mybatis和事务配置  begin ###-->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<property name="dataSource" ref="dataSource"/>
<!-- 配置扫描Mapper XML的位置 -->
<property name="mapperLocations" value="classpath:com/hry/spring/mybatis/mapper/*.xml"/>
<!-- 配置mybatis配置文件的位置 -->
<property name="configLocation" value="classpath:config/spring/mybatis_config.xml"/>

</bean>

  <!-- 配置扫描Mapper接口的包路径 -->
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<property name="basePackage" value="com.hry.spring.mybatis.mapper"/>
<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
</bean>

  <!-- 事务配置 -->
<bean id="transactionManager"
class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
p:dataSource-ref="dataSource"/>

<tx:advice id="txAdvice" transaction-manager="transactionManager" >
<tx:attributes>
  <tx:method name="add*" propagation="REQUIRED" />
  <tx:method name="create*" propagation="REQUIRED" />
  <tx:method name="save*" propagation="REQUIRED" />
  <tx:method name="insert*" propagation="REQUIRED" />
  <tx:method name="update*" propagation="REQUIRED" />
  <tx:method name="batch*" propagation="REQUIRED" />
  <tx:method name="del*" propagation="REQUIRED" />
  <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
  <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
  <tx:method name="*" read-only="true"/>
</tx:attributes>
</tx:advice>
<aop:config >
<aop:pointcut id="pt" expression="execution(* com.hry.spring.mybatis.service..*.*(..))" />
<aop:advisor pointcut-ref="pt" advice-ref="txAdvice"/>
</aop:config>
  <!-- ### Mybatis和事物配置  end ###-->