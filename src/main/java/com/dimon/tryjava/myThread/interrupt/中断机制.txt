
https://www.cnblogs.com/xrq730/p/4856361.html



Java没有提供一种安全、直接的方法来停止某个线程，而是提供了中断机制。中断机制是一种协作机制，
也就是说通过中断并不能直接终止另一个线程，而需要被中断的线程自己处理。有个例子举个蛮好，
就像父母叮嘱出门在外的子女要注意身体一样，父母说了，但是子女是否注意身体、如何注意身体，还是要看自己。

中断机制也是一样的，每个线程对象里都有一个标识位表示是否有中断请求（当然JDK的源码是看不到这个标识位的，是虚拟机线程实现层面的），
代表着是否有中断请求。



interrupt()
方法的作用仅仅是设置中断标识位



isInterrupted()
方法唯一的作用只是测试线程是否已经中断，中断标识位的状态并不受到该方法的影响


interrupted()
方法的作用是测试当前线程是否已经中断，线程的中断标识位由该方法清除。换句话说，连续两次调用该方法的返回值必定是false



中断处理时机

这其实是一个很宽泛的、没有标注答案的话题。显然，作为一种协作机制，不会强求被中断的线程一定要在某个点进行中断处理。
实际上，被中断线程只需要在合适的时候处理即可，如果没有合适的时间点，甚至可以不处理。"合适的时间点"就和业务逻辑密切相关了。

处理时机决定着程序的效率和响应的灵敏度。频繁的检查中断可能会导致程序执行效率低下，较少的检查则可能导致中断请求得不到及时响应。
在实际场景中，如果性能指标比较关键，可能需要建立一个测试模型来分析最佳的中断检测点，以平衡性能和响应灵敏性。











